//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using Utility;
using System.Collections.Generic;
namespace Game.Entity.Behavior
{
	public class GBehavior : MonoBehaviour,IEntityComponent
	{
		public delegate void D_Custom_Do(GEntity entity, GRoom room);

		public bool isAlive =true;
		public bool isContinueUpdating = true;

		public bool IsAlive { get { return this.isAlive; } }
	

		
		public List<GBehavior> others = new List<GBehavior>();

		
		public virtual void Awake(){}
		public virtual void Start(){}
		public virtual bool TestIsAlive (GEntity entity, GRoom room)
		{
			return true;
		}
		
		public virtual void Init(GEntity entity){
			foreach (var o in others)
				o.Init (entity);
		}
		public virtual void Kill(GEntity entity){
		}
		public virtual void KUpdate(GEntity entity, GRoom room){
			isAlive = TestIsAlive (entity, room);
			if (!isAlive) return;

			UpdateTheRest (others,entity, room);
			Do (entity, room);
		}
		public virtual void Do(GEntity entity, GRoom room){
		}
		public static void UpdateTheRest(List<GBehavior> bhvs,GEntity entity, GRoom room){
			
			for(int i = 0 ; i < bhvs.Count;i++){
				bhvs[i].KUpdate(entity,room);
				if(!bhvs[i].isAlive){
					bhvs.RemoveAt(i);
					continue;
				}
				if(!bhvs[i].isContinueUpdating ) break;

			}

		}
	}
}

