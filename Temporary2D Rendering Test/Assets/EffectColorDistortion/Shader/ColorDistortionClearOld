Shader "ColorDistortionClear/Clear" {
	Properties {
		_Color ("Color", Color) = (1,1,1,1)
		_MainTex ("Albedo (RGB)", 2D) = "white" {}
	}
	SubShader {
		Tags { "RenderType"="Opaque" }
	    pass{
	    	Blend SrcAlpha OneMinusSrcAlpha
	    	//ZTest Always Cull Off ZWrite Off Fog { Mode Off } //Rendering settings

			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			#pragma target 3.0

			#include "UnityCG.cginc"

			sampler2D _MainTex;
			sampler2D _DistortionTex;
			float4 _PlayerPosition;

			struct appdata_me{
				float4 vertex : POSITION;
				float4 color : COLOR;
				half2 texcoord   : TEXCOORD0;
			};

			struct vertex {
				float4 pos : SV_POSITION;
				float4 posRaw : VECTOR;
				float4 color : COLOR;
				half2 uv   : TEXCOORD0;
			};


			float rand(float x ,float y){
				return frac(sin(dot(float2(x,y) ,float2(12.9898,78.233))) * 43758.5453f);
			}

            fixed4 _Color;

			vertex vert (appdata_me v) {
				vertex o;


				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				o.posRaw = v.vertex;
				o.color = v.color;//*_Color;
				o.uv = v.texcoord;
				return o;
			}
			fixed4 GetLeftOver(float2 uv, float division){
				float4 color = tex2D(_MainTex,i.uv);
				color.rgb -= float3(.5,.5,0);
				color.r /= division;
				color.g /= division;
				return color;
			}

			fixed4 frag(vertex  i) : COLOR  {
				float4 color = tex2D(_MainTex,i.uv);
				float4 color1 = tex2D(_MainTex,i.uv+float2(0,.01));
				float4 color2 = tex2D(_MainTex,i.uv+float2(010,0));
				float4 color3 = tex2D(_MainTex,i.uv+float2(0,	-.01));
			
				float alpha = .1+rand(round((i.uv.x )/.005f)  ,round((i.uv.y ) /.005f ) )  *.010;
				float ratioSub = (1- length((color.rg - float2(.5,.5 ))/.5 ) );
				alpha *= 1 + ratioSub*ratioSub * 0;
				//alpha = max(.01,min(.3,alpha));
				float ratio = 1 - color.a;

				return float4(.5,.5,0,.2 );
			}

			ENDCG
		}
	}
	FallBack "Diffuse"
}
