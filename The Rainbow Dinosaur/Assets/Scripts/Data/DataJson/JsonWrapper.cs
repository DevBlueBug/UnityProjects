//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using SimpleJSON;
namespace Data
{
	public class JsonWrapper
	{
		public static Dictionary<Data.Piece.KId, string> dicTypeString = 
		dicTypeString = new Dictionary<Data.Piece.KId, string> (){
			//{EditorPiece.KType.World,"A"},
			{Data.Piece.KId.Empty,"A"},
			{Data.Piece.KId.Ground,"K"},
			{Data.Piece.KId.Block_Hard,"B"},
			{Data.Piece.KId.Block_Soft,"C"},
			{Data.Piece.KId.Decoration,"D"},
			{Data.Piece.KId.Door,"E"},
			{Data.Piece.KId.Edge,"F"},
			{Data.Piece.KId.EnemyFlying,"G"},
			{Data.Piece.KId.EnemyFoot,"H"},
			{Data.Piece.KId.EnemyTower,"I"},
			{Data.Piece.KId.EnemyTurret,"J"},
			{Data.Piece.KId.Item,"L"},
			{Data.Piece.KId.Player,"M"},
			{Data.Piece.KId.TrapFoot,"N"},
			{Data.Piece.KId.TrapGravity,"O"},
			{Data.Piece.KId.TrapTower,"P"}
		};
		public static Dictionary<string, Data.Piece.KId> dicStringType;
		static JsonWrapper ()
		{
			dicStringType = new Dictionary<string, Piece.KId> ();
			foreach (var e in dicTypeString)
				dicStringType.Add (e.Value, e.Key);

		}
		public static void helperUnwrap(JSONArray arr,List<Piece> pieces){
			for(int i = 0; i < arr.Count;i++){
				var element = arr[i];
				var piece = new Piece(
					dicStringType[ element["Type"]],element["X"].AsInt,element["Y"].AsInt);
				pieces.Add(piece);
			}
		}
		public static bool UnWrap(string content,out Board board){
			board = new Board ();
			if (content == null) return false;
			try{
				var node = JSON.Parse (content);
				
				for (int i = 0; i < 4; i++) {
					board.doors[i] = node["door"][i].AsBool;
				}
				var arrWorld = node ["piecesWorld"].AsArray;
				var arrUnits = node ["piecesUnits"].AsArray;
				helperUnwrap ( arrWorld, board.piecesWorld);
				helperUnwrap ( arrUnits, board.piecesUnits);
				return true;
			}
			catch{
				return false;
			}
		}
		
		public static JSONNode Wrap(Board data){
			var node = JSON.Parse ("{}");
			JSONArray 
				listPiecesWorld = new JSONArray (),
				listPiecesUnits = new JSONArray ();
			node ["door"] [-1].AsBool = data.doors [0];
			node ["door"] [-1].AsBool = data.doors [1];
			node ["door"] [-1].AsBool = data.doors [2];
			node ["door"] [-1].AsBool = data.doors [3];
			
			foreach (var pieceWorld in data.piecesWorld) {
				listPiecesWorld.Add( Wrap(pieceWorld));	
			}
			foreach (var pieceUnit in data.piecesUnits) {
				listPiecesUnits.Add(Wrap(pieceUnit));
			}
			node ["piecesWorld"] = listPiecesWorld;
			node ["piecesUnits"] = listPiecesUnits;
			//Debug.Log ("ToJson EditorBoard_Data " + node.ToString ());
			return node;
		}
		public static JSONNode Wrap(Piece piece){
			if (piece == null) return null;
			var node = JSON.Parse ("{}");
			node["X"].AsInt = piece.X;
			node["Y"].AsInt = piece.Y;
			node["Type"] = dicTypeString[piece.meType];
			return node;
		}
	}
}

